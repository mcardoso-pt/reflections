What happens when you initialize a repository? Why do you need to do it?

0 at first a repository is just an ordinary directory
1 with the command "git init" (prompt on the directory location)
  a hidden file named .git is created
2 that file has metadata about the directory which is now a repository
3 the hidden file can be see with the command "ls -a"
4 the status of the repository can be see with the command "git status"
5 at first there are no commits
6 this is because I may want to change the contents of the repository
  (a directory with the .git file) BEFORE I commit for the first time

How is the staging area different from the working directory and the repository?
What value do you think it offers?

1 you add files to the virtual staging area with the command "git add 'filename.xxx'"
2 with the command "git status" it can be see that the files now appear as "new file"
  (instead of "untracked file")
3 the new files will be added to the repository in the NEXT commit
4 it is possible to remove files from the staging area with the command "git reset 'filename.xxx'"
5 this offers a greater level of control about what is and isn't added in the commits

How can you use the staging area to make sure you have one commit per logical change?

1 use the command "git add 'filename.xxx'" to add to the staging area ONLY the files related
  to the logical change
2 then use the command "git commit" and only those files will be considered in the commit
  (even if others have been changed since the last commit)

What are some situations when branches would be helpful in keeping your history organized?
How would branches help?

1 use "git branch" to check existing branches - there is always at least the master branch
2 use "git branch 'branch name'" to create a new branch - this allows for experimenting parallel
  to the main version (the master branch)
3 to commit a change in the new branch use "git checkout 'branch name'" to change branch and then
  use "git add 'filename.xxx'" and "git commit" (after making the experimental changes in the file(s))

How do the diagrams help you visualize the branch structure?

1 well...an image is worth a thousand words...

